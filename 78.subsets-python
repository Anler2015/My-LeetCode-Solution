class Solution:
    # @param S, a list of integer     广度优先算法
    # @return a list of lists of integer
	def subsets(self, S):
		if S == []:
			return []

		S.sort() #sort the array to avoid descending list of int
		res=[[]]
		for element in S:
			temp = []
			for ans in res:
        		 #append the new int to each existing list
				temp.append(ans+[element])
			res += temp
		return res

====================================================================================
def dfs(sub,nums,startindex,res):                     # 深度优先算法
		res.append(sub[:])
		for i in range(startindex,len(nums)):
			sub.append(nums[i])
			dfs(sub,nums,i+1,res)
			sub.pop()

class Solution:
    # @param S, a list of integer
    # @return a list of lists of integer
	def subsets(self, nums):
		nums.sort()
		res=[]
		dfs([],nums,0,res)
		return res
